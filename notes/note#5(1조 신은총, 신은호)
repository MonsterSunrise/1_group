금일 신은호 학생은 면접으로 인하여 신은총 학생이 대표로 작성하였음

<1>
사람의 말하기 먹기 걷기 잠자기 기능은 공통적으로 가지고 있기 때문에 Person 이라는 클래스를 만든다
Student 의 공부하기 기능에 일하기가 추가된 StudentWorker 는 Person Class의 기능을 상속받은 Student Class 를 상속받아 구분 가능하다
공통된 연구에 가르치는 기능이 있는 Professor 는 Researcher 의 기능을 상속받아 가르치는 기능을 추가로 가지고 있기 때문에 Person Class 를 상속받은
Researcher Class 를 상속받은 Professor Class 를 작성 할 수 있다.

Professor Class를 예시로 작성해보면
class Person{
  void 말하기;
  void 먹기;
  void 걷기;
  void 잠자기;}
class Researcher : public Person{
  void 연구하기;}
class Professor : public Researcher{
  void 가르치기;}
이와 같이 작성할 수 있다.

<2>
업 캐스팅 & 다운 캐스팅 
업 캐스팅은 파생(자식) 클래스 포인터가 기본(부모) 클래스 포인터로 변환되는 것이다.
상속의 개념으로 파생(자식) 클래스는 기본(부모) 클래스의 기능을 포함하고 있기 때문에 접근에 대한 제한이 거의 없다.
다운 캐스팅은 기본(부모) 클래스의 포인터가 파생(자식) 클래스 포인터로 변환되는 것이다.
상속 관점에서 기본(부모) 클래스는 파생(자식) 클래스의 기능 중 포함하지 않는 기능이 있을 수 있기 때문에 접근에 대한 제한이 발생 할 수 있다.
또한 파생(자식) 클래스의 객체를 기본(부모) 클래스가 접근하기 위해서는 강제 타입 변환을 반드시 필요로 한다.

<3>
2번의 경우 메인함수 즉 외부함수이기 때문에 기본 클래스 Point p 기본 클래스의 객체를 생성했기 때문에 public에 대한 접근은 허용되지만 Protected과 private에 대한 접근은 제한된다.
특히 Protected는 파생 클래스에 대한 접근만 허용되기 때문에 3,4에 대한 코드는 오류를 발생시킨다
따라서 5,6번 코드 또한 위와 같은 이유로 외부함수에서 접근이기 때문에 x와 y에 대해서는 접근이 제한되어 오류를 발생시킨다.
반면 1번은 파생클래스 ColorPoint 클래스가 Protected 멤버 x와 y에 대해서 접근했기 때문에 접근이 허용된다.
2번은 public 멤버 set(int x, int y)의 접근이기 때문에 오류가 발생하지 않는 정상 코드이다.
